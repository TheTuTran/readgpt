generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    theme         String     @default("light")
    accounts      Account[]
    sessions      Session[]
    comments      Comment[]
    votes         Vote[]
    favorites     Favorite[]
}

model VerificationToken {
    identifier String   @id @default(auto()) @map("_id") @db.ObjectId
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Author {
    id        String  @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    biography String?
    novels    Novel[]
}

model Genre {
    id     String       @id @default(auto()) @map("_id") @db.ObjectId
    name   String
    novels NovelGenre[]
}

model Tag {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    label     String
    novelTags NovelTag[]
}

model Novel {
    id        String       @id @default(auto()) @map("_id") @db.ObjectId
    title     String
    summary   String?
    authorId  String       @db.ObjectId
    author    Author       @relation(fields: [authorId], references: [id])
    genres    NovelGenre[]
    tags      NovelTag[]
    chapters  Chapter[]
    comments  Comment[]
    favorites Favorite[]
    votes     Vote[]
}

model Chapter {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
    title    String
    content  String
    novelId  String    @db.ObjectId
    novel    Novel     @relation(fields: [novelId], references: [id])
    comments Comment[]
    votes    Vote[]
}

model Comment {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    content   String
    userId    String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id])
    novelId   String?  @db.ObjectId
    novel     Novel?   @relation(fields: [novelId], references: [id])
    chapterId String?  @db.ObjectId
    chapter   Chapter? @relation(fields: [chapterId], references: [id])
}

enum VoteType {
    UP
    DOWN
}

model Vote {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    type      VoteType
    userId    String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id])
    novelId   String?  @db.ObjectId
    novel     Novel?   @relation(fields: [novelId], references: [id])
    chapterId String?  @db.ObjectId
    chapter   Chapter? @relation(fields: [chapterId], references: [id])
}

// Explicit many-to-many join models

model Favorite {
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    userId  String @db.ObjectId
    user    User   @relation(fields: [userId], references: [id])
    novelId String @db.ObjectId
    novel   Novel  @relation(fields: [novelId], references: [id])
}

model NovelTag {
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    tagId   String @db.ObjectId
    tag     Tag    @relation(fields: [tagId], references: [id])
    novelId String @db.ObjectId
    novel   Novel  @relation(fields: [novelId], references: [id])
}

model NovelGenre {
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    novelId String @db.ObjectId
    genreId String @db.ObjectId
    novel   Novel  @relation(fields: [novelId], references: [id])
    genre   Genre  @relation(fields: [genreId], references: [id])

    @@unique([novelId, genreId])
}
